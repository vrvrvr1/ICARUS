<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Product</title>
  <link rel="stylesheet" href="/css/admin.css">
</head>
<body>
  <aside class="dashboard-sidebar">
    <div>
      <div class="sidebar-profile">
        <img src="/images/avatar.jpg" alt="Admin" class="sidebar-avatar" />
        <div>
          <div class="sidebar-welcome">Welcome back,</div>
          <div class="sidebar-name">Admin</div>
        </div>
      </div>

      <nav class="sidebar-nav">
        <a href="/admin"><i class="bi bi-house-door"></i> Dashboard</a>
        <a href="/admin/sales"><i class="bi bi-graph-up"></i> Sales</a>
        <a href="/adminproducts" class="active"><i class="bi bi-box-seam"></i> Products</a>
        <a href="/customers"><i class="bi bi-people"></i> Customers</a>
        <a href="/orders"><i class="bi bi-bag-check"></i> Orders</a>
        
        <a href="/admin/settings"><i class="bi bi-gear"></i> Settings &amp; Configuration</a>
      </nav>
    </div>

    <div>
      <p class="text-center text-secondary small mb-0">© 2025 Icarus Wears</p>
    </div>
  </aside>

  <main class="dashboard-main">
    <div class="dashboard-header">
      <div>
        <div class="dashboard-title-main">Edit Product</div>
        <div class="dashboard-title-sub">Make updates to product details</div>
      </div>
      <div class="dashboard-search">
        <a href="/adminproducts" class="btn btn-ghost">← Back to Products</a>
      </div>
    </div>

    <div style="max-width:980px;margin:0 auto;">
      <div class="dashboard-card">
  <form action="/adminproducts/<%= product.id %>/edit" method="POST" enctype="multipart/form-data" style="display:grid;grid-template-columns: 1fr 360px; gap:1rem; align-items:start;">

          <div>
            <label class="attr-label" for="name">Product Name</label>
            <input class="search-input" type="text" id="name" name="name" value="<%= product.name %>" required>

            <label class="attr-label" for="short_description" style="margin-top:10px;">Short Description</label>
            <textarea class="search-input" id="short_description" name="short_description" rows="4" style="resize:vertical;padding:10px;border-radius:8px;border:1px solid rgba(255,255,255,0.06);background:transparent;color:var(--text-primary);"><%= product.short_description || '' %></textarea>

            <% 
              // Use server-provided `selectedColors` / `selectedSizes` when available (derived from product_variants).
              // Otherwise fall back to parsing `product.colors` / `product.sizes`.

              // Normalize colors into `selectedColorsFinal` (lowercase for class names, display will capitalize)
              let selectedColorsFinal = [];
              if (typeof selectedColors !== 'undefined' && selectedColors && selectedColors.length) {
                // server provided an array (or truthy value)
                if (Array.isArray(selectedColors)) selectedColorsFinal = selectedColors.map(c => String(c).toLowerCase());
                else selectedColorsFinal = String(selectedColors).split(',').map(s => s.trim().toLowerCase()).filter(Boolean);
              } else {
                const rawColors = product.colors || product.color || null;
                if (rawColors) {
                  if (Array.isArray(rawColors)) selectedColorsFinal = rawColors.map(c => String(c).toLowerCase());
                  else selectedColorsFinal = String(rawColors).split(',').map(s => s.trim().toLowerCase()).filter(Boolean);
                }
              }

              // Normalize sizes into `selectedSizesFinal` (uppercase for display)
              let selectedSizesFinal = [];
              if (typeof selectedSizes !== 'undefined' && selectedSizes && selectedSizes.length) {
                if (Array.isArray(selectedSizes)) selectedSizesFinal = selectedSizes.map(sz => String(sz).toUpperCase());
                else selectedSizesFinal = String(selectedSizes).split(',').map(s => s.trim().toUpperCase()).filter(Boolean);
              } else {
                const rawSizes = product.sizes || product.size || null;
                if (rawSizes) {
                  if (Array.isArray(rawSizes)) selectedSizesFinal = rawSizes.map(sz => String(sz).toUpperCase());
                  else selectedSizesFinal = String(rawSizes).split(',').map(s => s.trim().toUpperCase()).filter(Boolean);
                }
              }
            %>

            <div style="display:flex;gap:0.75rem;margin-top:10px;align-items:flex-end;">
              <div style="width:140px;">
                <label class="attr-label" for="price">Price</label>
                <input class="search-input" type="number" id="price" name="price" step="0.01" value="<%= product.price %>" required style="width:100%;box-sizing:border-box;">
              </div>
              <div style="flex:1;">
                <label class="attr-label" for="category">Category</label>
                <input class="search-input" type="text" id="category" name="category" value="<%= product.category %>">
              </div>
            </div>

            <div style="display:flex;gap:12px;margin-top:8px;align-items:center;">
              <label style="display:flex;align-items:center;gap:8px;">
                <input type="checkbox" name="is_new" <%= product.is_new ? 'checked' : '' %> />
                <span>Mark as NEW</span>
              </label>
            </div>

            <% // Per-color & size stock editor. Expect server to pass `stockByCombination` as an object like { color: { size: qty } } or fallback to {} %>
            <% const __stockMap = (typeof stockByCombination !== 'undefined' && stockByCombination) ? stockByCombination : {}; %>
            <% // normalize stock map: lowercase colors -> uppercase sizes for reliable lookup in the template %>
            <% const _normStockMap = {}; %>
            <% try { %>
              <% for (const rawC of Object.keys(__stockMap || {})) { %>
                <% const cKey = String(rawC || '').trim().toLowerCase(); %>
                <% _normStockMap[cKey] = _normStockMap[cKey] || {}; %>
                <% const sizesObj = __stockMap[rawC] || {}; %>
                <% for (const rawS of Object.keys(sizesObj)) { %>
                  <% const sKey = String(rawS || '').trim().toUpperCase(); %>
                  <% _normStockMap[cKey][sKey] = Number(sizesObj[rawS] || 0); %>
                <% } %>
              <% } %>
            <% } catch(e) { /* ignore */ } %>
            <div class="dashboard-card" style="margin-top:12px;">
              <label class="attr-label">Stock by Color & Size</label>
              <div style="overflow:auto; margin-top:8px;">
                <% 
                  // Prefer variants-derived sizes/colors (product_variants). If none, fall back to
                  // product.sizes / product.colors. If still none, use sensible defaults.
                  const defaultSizes = ['S','M','L','XL'];
                  const defaultColors = ['black','red','blue','green'];

                  const productSizes = (product && product.sizes) ? String(product.sizes).split(',').map(s=>s.trim().toUpperCase()).filter(Boolean) : [];
                  const productColors = (product && product.colors) ? String(product.colors).split(',').map(c=>c.trim()).filter(Boolean) : [];

                  // If variants are present (server-provided or product fields), use the normalized lists we prepared above.
                  let _sizes = (selectedSizesFinal && selectedSizesFinal.length) ? (selectedSizesFinal.map(s=>String(s).toUpperCase())) : (productSizes && productSizes.length ? productSizes : defaultSizes);
                  let _colors = (selectedColorsFinal && selectedColorsFinal.length) ? (selectedColorsFinal.map(c=>String(c).trim())) : (productColors && productColors.length ? productColors : defaultColors);
                %>
                <table class="table" style="min-width:480px;">
                  <thead>
                    <tr>
                      <th style="width:160px;">Color \ Size</th>
                      <% _sizes.forEach(sz => { %>
                        <th style="text-align:center;"><%= sz %></th>
                      <% }) %>
                    </tr>
                  </thead>
                  <tbody>
                    <% _colors.forEach(color => { %>
                      <tr>
                        <td style="vertical-align:middle; text-transform:capitalize;"><%= color %></td>
                        <% _sizes.forEach(sz => {
                             // lookup in normalized stock map using lowercase color + uppercase size
                             const colorKey = String(color || '').trim().toLowerCase();
                             const sizeKey = String(sz || '').trim().toUpperCase();
                             const v = (_normStockMap[colorKey] && typeof _normStockMap[colorKey][sizeKey] !== 'undefined') ? Number(_normStockMap[colorKey][sizeKey]) : '';
                        %>
                          <td style="text-align:center;">
                            <input class="search-input" type="number" name="stock[<%= color %>][<%= sz %>]" min="0" value="<%= v %>" style="width:80px; margin:0 auto;">
                          </td>
                        <% }) %>
                      </tr>
                    <% }) %>
                  </tbody>
                </table>
              </div>
              <div class="small text-secondary" style="margin-top:6px;">Set stock per color & size. Leave blank to fallback to total stock or per-size stock.</div>
            </div>

            <!-- category handled above in the left column; color chips moved under Short Description -->

            <div style="margin-top:12px;display:flex;gap:8px;align-items:center;">
              <button type="submit" class="btn">Update Product</button>
              <a href="/adminproducts" class="btn btn-ghost">Cancel</a>
            </div>
          </div>

          <aside style="display:flex;flex-direction:column;gap:12px;">
            <div>
              <label class="attr-label">Product Images</label>
              <div class="upload-grid">
                <% 
                  // gather up to four image columns from the product record
                  const previewImgs = [];
                  ['image_url','image_url_2','image_url_3','image_url_4','image','image2'].forEach(k => {
                    if (product[k]) previewImgs.push(product[k]);
                  });
                  // ensure length 4 for slots
                  while(previewImgs.length < 4) previewImgs.push(null);
                %>
                <% for(let i=0;i<4;i++){ %>
                  <% if(previewImgs[i]){ %>
                    <div class="upload-slot" data-slot="<%= i %>">
                      <input id="input-<%= i %>" type="file" name="image<%= i %>" accept="image/*" style="opacity:0;position:absolute;inset:0;cursor:pointer;" />
                      <img src="<%= (previewImgs[i].startsWith('/') ? previewImgs[i] : ('/uploads/' + previewImgs[i])) %>" class="upload-preview-img" onerror="this.onerror=null;this.style.display='none'" />
                      <button type="button" class="img-delete" data-slot="<%= i %>">Delete</button>
                    </div>
                  <% } else { %>
                    <div class="upload-slot empty-slot" data-slot="<%= i %>">
                      <input id="input-<%= i %>" type="file" name="image<%= i %>" accept="image/*" style="opacity:0;position:absolute;inset:0;cursor:pointer;" />
                    </div>
                  <% } %>
                <% } %>
              </div>
              <div style="font-size:0.85rem;color:var(--text-secondary);margin-top:6px;">You need to add at least 4 images. Pay attention to background and dimensions.</div>
            </div>

            <!-- Discounts panel removed per request -->

            <div class="dashboard-card" style="margin-top:12px;">
              <label class="attr-label">Product Promo (auto-apply)</label>
              <div class="small text-secondary" style="margin:4px 0 8px;">Set a per-product sale that applies automatically without a code.</div>
              <div style="display:flex; align-items:center; gap:10px;">
                <label style="display:flex; align-items:center; gap:8px;">
                  <input type="checkbox" name="promo_active" <%= product.promo_active ? 'checked' : '' %> />
                  <span>Enable promo</span>
                </label>
                <div style="margin-left:auto; display:flex; align-items:center; gap:6px;">
                  <span class="small text-secondary">Percent</span>
                  <input class="search-input" type="number" name="promo_percent" min="0" max="100" step="1" value="<%= Number(product.promo_percent || 0) %>" style="width:100px;">
                  <span>%</span>
                </div>
              </div>
              <div class="small text-secondary" style="margin-top:6px;">
                Example: 20 means 20% off (price becomes 80%). Rounds to cents.
              </div>
            </div>

            <!-- right column reserved for images and helpers -->
          </aside>

        </form>
      </div>
    </div>
  </main>
  <script>
    // preview selected files per slot
    document.addEventListener('DOMContentLoaded', function(){
      // (no client-side preselect) initial checked state is emitted by EJS server-side
      function readFileToImg(file, imgEl){
        const reader = new FileReader();
        reader.onload = e => imgEl.src = e.target.result;
        reader.readAsDataURL(file);
      }

      for(let i=0;i<4;i++){
        const input = document.getElementById('input-' + i);
        if(!input) continue;
        input.addEventListener('change', function(e){
          const file = e.target.files[0];
          const slot = document.querySelector('.upload-slot[data-slot="'+i+'"]');
          if(file && slot){
            let img = slot.querySelector('.upload-preview-img');
            if(!img){ img = document.createElement('img'); img.className='upload-preview-img'; slot.appendChild(img); }
            readFileToImg(file, img);
            slot.classList.remove('empty-slot');
          }
        });
      }

      // handle delete buttons (AJAX)
      document.querySelectorAll('.img-delete').forEach(btn => {
        btn.addEventListener('click', async function(){
          const slot = btn.getAttribute('data-slot');
          const productId = '<%= product.id %>';
          if(!confirm('Delete this image? This cannot be undone.')) return;
          try{
            const res = await fetch(`/adminproducts/${productId}/image/${slot}`, { method: 'DELETE' });
            const json = await res.json();
            if(json.ok){
              const container = document.querySelector('.upload-slot[data-slot="'+slot+'"]');
              if(container){
                const img = container.querySelector('.upload-preview-img'); if(img) img.remove();
                container.classList.add('empty-slot');
              }
            } else {
              alert('Failed to delete image');
            }
          } catch(err){ console.error(err); alert('Error deleting'); }
        });
      });
    });
  </script>
</body>
</html>
