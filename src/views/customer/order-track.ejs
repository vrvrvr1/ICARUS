<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Track Order #<%= order.id %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.8/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/global.css">
  <link rel="stylesheet" href="/css/track.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
   </head>
  <body class="track">
    <div class="container py-4">
      <div class="page-head d-flex align-items-center justify-content-between">
        <h1 class="title h4 mb-0">Order #<%= order.id %></h1>
        <a href="/accountsettings?tab=orders" class="btn btn-primary">Back to my orders</a>
      </div>

      <% 
        const _s = String(order.status || '').toLowerCase();
  const stepIndex = (_s.includes('delivered') || _s.includes('completed') || _s.includes('deliver') || _s.includes('complete')) ? 3
      : ((_s.includes('en route') || _s.includes('courier') || _s.includes('out')) ? 2
      : ((_s.includes('shipped') || _s.includes('ship')) ? 1 : 0));
  const _pct = (stepIndex/3) * 100;
      %>

      <div class="grid mt-2">
        <section class="cardx">
          <div class="head"><h2 class="h6 m-0">Delivery progress</h2></div>
          <div class="body">
            <div class="dl-card" style="border:none; box-shadow:none; padding:0;">
              <div class="dl-title" style="display:none">Delivery timeline</div>
              <div class="dl-track-wrap">
                <div class="dl-track-bar" data-step="<%= stepIndex %>"></div>
              </div>
              <div class="dl-steps">
                <div class="dl-step <%= stepIndex >= 0 ? 'done' : '' %>">
                  <div class="dl-dot"></div>
                  <div class="dl-icon"><i class="bi bi-journal-check"></i></div>
                  <div class="dl-label">Order Placed</div>
                </div>
                <div class="dl-step <%= stepIndex >= 1 ? 'done' : '' %>">
                  <div class="dl-dot"></div>
                  <div class="dl-icon"><i class="bi bi-box-seam"></i></div>
                  <div class="dl-label">Order Shipped</div>
                  <% if (typeof statusTimes !== 'undefined' && (statusTimes.shipped_at || statusTimes.shippedAt)) { %>
                    <div class="dl-ts"><%= new Date(statusTimes.shipped_at || statusTimes.shippedAt).toLocaleString() %></div>
                  <% } %>
                </div>
                <div class="dl-step <%= stepIndex >= 2 ? 'done' : '' %>">
                  <div class="dl-dot"></div>
                  <div class="dl-icon"><i class="bi bi-truck"></i></div>
                  <div class="dl-label">Order En Route</div>
                  <% if (typeof statusTimes !== 'undefined' && (statusTimes.out_for_delivery_at || statusTimes.outForDeliveryAt)) { %>
                    <div class="dl-ts"><%= new Date(statusTimes.out_for_delivery_at || statusTimes.outForDeliveryAt).toLocaleString() %></div>
                  <% } %>
                </div>
                <div class="dl-step <%= stepIndex >= 3 ? 'done' : '' %>">
                  <div class="dl-dot"></div>
                  <div class="dl-icon"><i class="bi bi-house"></i></div>
                  <div class="dl-label">Order Arrived</div>
                  <% if (typeof statusTimes !== 'undefined' && (statusTimes.delivered_at || statusTimes.deliveredAt)) { %>
                    <div class="dl-ts"><%= new Date(statusTimes.delivered_at || statusTimes.deliveredAt).toLocaleString() %></div>
                  <% } %>
                </div>
              </div>
              <% 
                const es = order.estimated_delivery_start ? new Date(order.estimated_delivery_start) : null;
                const ee = order.estimated_delivery_end ? new Date(order.estimated_delivery_end) : null;
                const single = order.estimated_delivery ? new Date(order.estimated_delivery) : null;
                function fmtDate(d){ return d ? d.toLocaleDateString(undefined, { month: 'short', day: 'numeric' }) : ''; }
                function fmtDateFull(d){ return d ? d.toLocaleDateString() : ''; }
                let etaLabel = '';
                if (es && ee){
                  if (es.toDateString() === ee.toDateString()) etaLabel = fmtDateFull(es);
                  else if (es.getFullYear() === ee.getFullYear() && es.getMonth() === ee.getMonth()) etaLabel = `${fmtDate(es)} – ${ee.getDate()}`;
                  else etaLabel = `${fmtDate(es)} – ${fmtDate(ee)}`;
                } else if (es || ee){
                  etaLabel = fmtDateFull(es || ee);
                } else if (single){
                  etaLabel = fmtDateFull(single);
                }
              %>
              <% if (etaLabel) { %>
                <div class="text-muted small" style="margin-top:6px;">Estimated delivery: <strong><%= etaLabel %></strong></div>
              <% } %>
            </div>
          
            <div class="text-muted small mt-2">Placed: <%= new Date(order.created_on || Date.now()).toLocaleString() %></div>
            <hr>
            <div class="items">
              <% if (items && items.length) { %>
                <% items.forEach(it => { %>
                  <div class="item">
                    <img class="thumb" src="<%= it.image_url || '/image/profile1.png' %>" alt="<%= it.product_name %>">
                    <div>
                      <div class="name"><%= it.product_name %></div>
                      <div class="qty">x<%= it.quantity %></div>
                    </div>
                    <div class="price">$<%= Number(it.price * it.quantity).toLocaleString() %></div>
                  </div>
                <% }) %>
                <div class="summary"><span>Total</span><strong>$<%= Number(total || 0).toLocaleString() %></strong></div>
              <% } else { %>
                <div class="text-muted">No items found for this order.</div>
              <% } %>
            </div>
          </div>
        </section>

        <section class="cardx map-card">
          <div class="head"><span class="fw-semibold">Live delivery location</span><small id="last-updated" class="text-muted"></small></div>
          <div class="body p-0">
            <div id="map" class="position-relative" 
              data-store-lat="<%= store && store.lat != null ? store.lat : '' %>"
              data-store-lng="<%= store && store.lng != null ? store.lng : '' %>"
              data-store-name="<%= store && store.name ? store.name : '' %>"></div>
            <div class="legend">
              <div class="item"><span class="dot dot-store"></span> Store</div>
              <div class="item"><span class="dot dot-order"></span> Order</div>
            </div>
          </div>
        </section>
    <div class="mt-3 d-flex gap-2">
      <a href="/help" class="btn btn-outline-secondary">Need help?</a>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/js/all.min.js" crossorigin="anonymous"></script>
  <script
    src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
    crossorigin=""
  ></script>
  <script>
    (function(){
  const orderId = "<%= order.id %>";
  const apiUrl = `/api/tracking/${orderId}`;
  const statusBadge = null;
      const lastUpdated = document.getElementById('last-updated');
      // set progress width to the center of the selected step's dot
      function setBarToIndex(wrap){
        const bar = wrap.querySelector('.dl-track-bar');
        if (!bar) return;
        let idx = parseInt(bar.getAttribute('data-step'), 10);
        if (isNaN(idx)) idx = 0;
        const steps = wrap.parentElement.querySelectorAll('.dl-steps .dl-step');
        if (!steps || !steps.length) return;
        const i = Math.min(Math.max(idx, 0), steps.length - 1);
        const dot = steps[i].querySelector('.dl-dot');
        if (!dot) return;
        const wrapRect = wrap.getBoundingClientRect();
        const dotRect = dot.getBoundingClientRect();
        const centerX = dotRect.left + (dotRect.width/2);
        const widthPx = Math.max(0, Math.min(centerX - wrapRect.left, wrap.clientWidth));
        bar.style.width = widthPx + 'px';
      }
      document.querySelectorAll('.dl-track-wrap').forEach(w => setBarToIndex(w));
      window.addEventListener('resize', () => {
        document.querySelectorAll('.dl-track-wrap').forEach(w => setBarToIndex(w));
      });

      // Default view: center Philippines
      const map = L.map('map');
      const tile = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; OpenStreetMap contributors'
      });
      tile.addTo(map);

      // Read store data from DOM attributes
      const mapEl = document.getElementById('map');
      const store = {
        lat: mapEl.dataset.storeLat ? parseFloat(mapEl.dataset.storeLat) : undefined,
        lng: mapEl.dataset.storeLng ? parseFloat(mapEl.dataset.storeLng) : undefined,
        name: mapEl.dataset.storeName || 'Store',
      };

      // Custom icons for clarity
  const storeIcon = L.divIcon({ className: 'custom-icon', html: '<div style="background:#2563eb;width:14px;height:14px;border-radius:50%;border:2px solid #fff;box-shadow:0 0 0 1px rgba(0,0,0,.2)"></div>', iconSize:[14,14], iconAnchor:[7,7] });
  const orderIcon = L.divIcon({ className: 'custom-icon', html: '<div style="background:#ef4444;width:14px;height:14px;border-radius:50%;border:2px solid #fff;box-shadow:0 0 0 1px rgba(0,0,0,.2)"></div>', iconSize:[14,14], iconAnchor:[7,7] });

  let orderMarker = null;
  let storeMarker = null;

  function setStatus(text){ /* pill removed */ }

      function setUpdated(ts){
        if (!ts) { lastUpdated.textContent = ''; return; }
        const d = new Date(ts);
        lastUpdated.textContent = `Updated ${d.toLocaleTimeString()}`;
      }

      async function fetchLocation(){
        try{
          const res = await fetch(apiUrl, { credentials: 'same-origin' });
          if(!res.ok) throw new Error('Network');
          const data = await res.json();
          const { lat, lng, status, updatedAt } = data || {};
          if (typeof lat === 'number' && typeof lng === 'number'){
            const pos = [lat, lng];
            if (!orderMarker){
              orderMarker = L.marker(pos, { icon: orderIcon }).addTo(map).bindPopup('Order location');
            } else {
              orderMarker.setLatLng(pos);
            }

            // Add store marker if available
            if (store && typeof store.lat === 'number' && typeof store.lng === 'number'){
              const sloc = [store.lat, store.lng];
              if (!storeMarker){
                storeMarker = L.marker(sloc, { icon: storeIcon }).addTo(map).bindPopup(store.name || 'Store');
              }
              // Fit both
              const group = L.featureGroup([orderMarker, storeMarker]);
              map.fitBounds(group.getBounds().pad(0.2));
            } else {
              // Fallback to single view
              map.setView(pos, 13);
            }
          }
          setStatus(status || '<%= order.status || "Processing" %>');
          setUpdated(updatedAt);
        }catch(err){
          console.warn('Tracking fetch failed', err);
        }
      }

      // First load and polling
      fetchLocation();
      const interval = setInterval(fetchLocation, 10000);

      // Cleanup when navigating away
      window.addEventListener('beforeunload', () => clearInterval(interval));
    })();
  </script>
  <style>
    /* subtle timestamp label under step */
    .dl-step .dl-ts{ color:#64748b; font-size:12px; margin-top:2px; }
  </style>
</body>
</html>
